---
- name: Deploy NestJS Boilerplate
  hosts: hng
  become: yes

  vars:
    app_dir: /opt/stage_5b
    log_dir: /var/log/stage_5b
    app_user: hng 
    db_name: admindb
    db_user: admin
    db_password: dbpassword
    profile: local
    node_env: development
    port: 3000
    db_host: localhost
    db_port: 5432
    db_entities: "dist/src/modules/**/entities/**/*.entity{.ts,.js}"
    db_migrations: "dist/**/migrations/*{.ts,.js}"
    db_type: postgres
    db_ssl: "true"
    jwt_secret: someSecrets
    jwt_expiry_timeframe: 3600

  tasks:
    - name: Create hng user
      user:
        name: "{{ app_user }}"
        groups: sudo
        shell: /bin/bash

    - name: Update apt cache
      apt: update_cache=yes
    
    - name: Install Node.js
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
        sudo apt-get install -y nodejs

    - name: Ensure directory exists
      file:
        path: /opt/my_app
        state: directory

    - name: Clone repository if not present
      git:
        repo: https://github.com/hngprojects/hng_boilerplate_nestjs.git
        version: devops
        dest: "{{ app_dir }}"
        update: yes
      when: not ansible_facts['ansible_env'].get('GIT_DIR') | default('') | length

    - name: Set ownership of cloned repository
      file:
        path: "{{ app_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes

    - name: Install base dependencies
      apt:
        name: 
          - git 
          - npm
          - postgresql
        state: present

    - name: Add Nginx GPG key
      apt_key:
        url: 'https://nginx.org/keys/nginx_signing.key'
        state: present
        
    - name: Add Nginx official repository
      apt_repository:
        repo: 'deb http://nginx.org/packages/ubuntu/ {{ ansible_distribution_release | lower }} nginx'
        state: present
        filename: nginx
        
    - name: Install Nginx 1.26
      apt:
        name: nginx=1.26.*
        state: present
        update_cache: yes
        allow_downgrade: yes

    - name: Install NestJS CLI globally
      npm:
        name: '@nestjs/cli'
        global: yes

    - name: Install project dependencies
      npm:
        path: "{{ app_dir }}"
      become: yes

    - name: Create .env file
      copy:
        content: |
          PROFILE={{ profile }}
          NODE_ENV={{ node_env }}
          PORT={{ port }}
          DB_USERNAME={{ db_user }}
          DB_PASSWORD={{ db_password }}
          DB_DATABASE={{ db_name }}
          DB_HOST={{ db_host }}
          DB_PORT={{ db_port }}
          DB_ENTITIES={{ db_entities }}
          DB_MIGRATIONS={{ db_migrations }}
          DB_TYPE={{ db_type }}
          DB_SSL={{ db_ssl }}
          JWT_SECRET={{ jwt_secret }}
          JWT_EXPIRY_TIMEFRAME={{ jwt_expiry_timeframe }}
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'
      notify: Restart application

    - name: Configure PostgreSQL
      become_user: postgres
      shell: |
        psql -c "CREATE DATABASE {{ db_name }};"
        psql -c "CREATE USER {{ db_user }} WITH ENCRYPTED PASSWORD '{{ db_password }}';"
        psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ db_name }} TO {{ db_user }};"
      args:
        executable: /bin/bash
      become: no

    - name: Save PostgreSQL credentials
      copy:
        content: "DB_USER={{ db_user }}\nDB_PASSWORD={{ db_password }}"
        dest: /var/secrets/pg_pw.txt
        mode: '0600'

    - name: Install typeorm globally
      npm:
        name: typeorm
        global: yes
        state: present

    - name: Generate migration file
      shell: cd {{ app_dir }} && npm run migration:generate
      become_user: "{{ app_user }}"

    - name: Run migrations
      shell: cd {{ app_dir }} && npm run migration:run
      become_user: "{{ app_user }}"

    - name: Install RabbitMQ
      apt:
        name: rabbitmq-server
        state: present

    - name: Enable RabbitMQ plugins
      rabbitmq_plugin:
        names:
          - rabbitmq_management
        state: enabled

    - name: Enable and start RabbitMQ service
      systemd:
        name: rabbitmq-server
        enabled: yes
        state: started

    - name: Set up Nginx configuration
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/default
      notify: Restart Nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
      notify: Restart Nginx

    - name: Create log directory
      file:
        path: "{{ log_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Create log files
      file:
        path: "{{ item }}"
        state: touch
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
      loop:
        - "{{ log_dir }}/error.log"
        - "{{ log_dir }}/out.log"

    - name: Build NestJS application
      shell: cd {{ app_dir }} && npm run build
      become_user: "{{ app_user }}"

    - name: Set up systemd service
      template:
        src: nestjs.service.j2
        dest: /etc/systemd/system/nestjs.service
      notify: Restart application

  handlers:
    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted

    - name: Restart application
      systemd:
        name: nestjs
        state: restarted
        daemon_reload: yes

    - name: Enable application service
      systemd:
        name: nestjs
        enabled: yes
        state: started